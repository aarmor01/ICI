// Block definition (there may be more than one block per file)
FUNCTION_BLOCK FuzzyGhosts

// Define input variables
VAR_INPUT				
	BLINKYedibleTime : REAL;
	PINKYedibleTime : REAL;
	INKYedibleTime : REAL;
	SUEedibleTime : REAL;
	
	BLINKYlairTime : REAL;
	PINKYlairTime : REAL;
	INKYlairTime : REAL;
	SUElairTime : REAL;
	
	BLINKYdistanceToPacMan : REAL;
	PINKYdistanceToPacMan : REAL;
	INKYdistanceToPacMan : REAL;
	SUEdistanceToPacMan : REAL;
	
	distanceToPacManConfidence : REAL;
	
	pacManDistancePowerPill : REAL;
	pacManDistancePowerPillConfidence : REAL;
	
	numPills : REAL;
	score : REAL;
	currentTime : REAL;
END_VAR

// Define output variables
VAR_OUTPUT				
	Runaway : REAL;
	Chase: REAL;
END_VAR

// --- INPUT VALUES GRAPHS ---
FUZZIFY BLINKYedibleTime	// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM none := (-50, 0) (0, 1) (0, 0);
	TERM low := (0, 0) (1, 1) (30, 1) (50, 0); 
	TERM medium := gauss 70 30;
	TERM high := (70, 0) (110, 1) (200, 1);
END_FUZZIFY
FUZZIFY PINKYedibleTime		// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM none := (-50, 0) (0, 1) (0, 0);
	TERM low := (0, 0) (1, 1) (30, 1) (50, 0); 
	TERM medium := gauss 70 30;
	TERM high := (70, 0) (110, 1) (200, 1);
END_FUZZIFY
FUZZIFY INKYedibleTime   	// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM none := (-50, 0) (0, 1) (0, 0);
	TERM low := (0, 0) (1, 1) (30, 1) (50, 0); 
	TERM medium := gauss 70 30;
	TERM high := (70, 0) (110, 1) (200, 1);
END_FUZZIFY
FUZZIFY SUEedibleTime		// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM none := (-50, 0) (0, 1) (0, 0);
	TERM low := (0, 0) (1, 1) (30, 1) (50, 0); 
	TERM medium := gauss 70 30;
	TERM high := (70, 0) (110, 1) (200, 1);
END_FUZZIFY

FUZZIFY BLINKYlairTime	// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
    TERM none := (-10, 0) (0, 1) (0, 0);
	TERM low := (0, 0) (1, 1) (10, 1) (20, 0); 
	TERM medium := gauss 20 5;
	TERM high := (20, 0) (35, 1) (40, 1);
END_FUZZIFY
FUZZIFY PINKYlairTime		// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM none := (-10, 0) (0, 1) (0, 0);
	TERM low := (0, 0) (1, 1) (10, 1) (20, 0); 
	TERM medium := gauss 20 5;
	TERM high := (20, 0) (35, 1) (40, 1);
END_FUZZIFY
FUZZIFY INKYlairTime		// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM none := (-10, 0) (0, 1) (0, 0);
	TERM low := (0, 0) (1, 1) (10, 1) (20, 0); 
	TERM medium := gauss 20 5;
	TERM high := (20, 0) (35, 1) (40, 1);
END_FUZZIFY
FUZZIFY SUElairTime		// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM none := (-10, 0) (0, 1) (0, 0);
	TERM low := (0, 0) (1, 1) (10, 1) (20, 0); 
	TERM medium := gauss 20 5;
	TERM high := (20, 0) (35, 1) (40, 1);
END_FUZZIFY

FUZZIFY BLINKYdistanceToPacMan			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM near := (0, 1) (60, 0) ; 
	TERM medium := gauss 75 25;
	TERM far := (90, 0) (150, 1) (200, 1);
END_FUZZIFY
FUZZIFY PINKYdistanceToPacMan			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM near := (0, 1) (60, 0); 
	TERM medium := gauss 75 25;
	TERM far := (90, 0) (150, 1) (200, 1);
END_FUZZIFY
FUZZIFY INKYdistanceToPacMan			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM near := (0, 1) (60, 0) ; 
	TERM medium := gauss 75 25;
	TERM far := (90, 0) (150, 1) (200, 1);
END_FUZZIFY
FUZZIFY SUEdistanceToPacMan			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM near := (0, 1) (60, 0) ; 
	TERM medium := gauss 75 25;
	TERM far := (90, 0) (150, 1) (200, 1);
END_FUZZIFY

FUZZIFY distanceToPacManConfidence			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM low := (0,1)(25,1)(50,0) ; 
	TERM medium := gauss 50 25;
	TERM high := (50,0)(75,1)(100,1);
END_FUZZIFY

FUZZIFY pacManDistancePowerPill			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM near := (0, 1) (60, 0) ; 
	TERM medium := gauss 75 25;
	TERM far := (90, 0) (150, 1) (200, 1);
END_FUZZIFY
FUZZIFY pacManDistancePowerPillConfidence			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM low := (0,1)(25,1)(50,0) ; 
	TERM medium := gauss 50 25;
	TERM high := (50,0)(75,1)(100,1);
END_FUZZIFY


FUZZIFY numPills			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM few := (0, 1) (25, 0) ; 
	TERM standard := gauss 50 25;
	TERM aLot := (70, 0) (100, 1) (200, 1);
END_FUZZIFY
FUZZIFY score			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM few := (0, 1) (1000, 0) ; 
	TERM standard := gauss 1750 1000;
	TERM aLot := (2700, 0) (3200, 1) (10000, 1);
END_FUZZIFY
FUZZIFY currentTime			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM beginning := (0, 1) (500, 0) ; 
	TERM mid := gauss 1000 750;
	TERM end := (1500, 0) (2000, 1) (10000, 1);
END_FUZZIFY
// ------

// --- OUTPUT VALUES GRAPHS ---
DEFUZZIFY Runaway			// Defzzzify output variable 'tip' : {'cheap', 'average', 'generous' }
	TERM calm := (0,1) (5,1) (15,0);
	TERM nervious := gauss 15 5;
	TERM emergency := (15,0) (25,1) (30,1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

DEFUZZIFY Chase			// Defzzzify output variable 'tip' : {'cheap', 'average', 'generous' }
	TERM calm := (0,1) (5,1) (15,0);
	TERM nervious := gauss 15 5;
	TERM emergency := (15,0) (25,1) (30,1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY
// ------

// --- RULES ---
RULEBLOCK BLINKYRules
	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;			// Use 'min' activation method
	ACCU : MAX;			// Use 'MAX' accumulation method (Other options PROBOR and SUM)

	RULE 1 : IF BLINKYedibleTime IS true AND BLINKYdistanceToPacMan IS near AND distanceToPacManConfidence IS high THEN Runaway IS emergency;
	RULE 2 : IF BLINKYedibleTime IS true AND BLINKYdistanceToPacMan IS near AND distanceToPacManConfidence IS high THEN Chase IS calm;
	RULE 3 : IF BLINKYedibleTime IS false AND pacManDistancePowerPill IS near AND pacManDistancePowerPillConfidence IS high THEN Runaway IS nervious;
	RULE 4 : IF BLINKYedibleTime IS false AND pacManDistancePowerPill IS near AND pacManDistancePowerPillConfidence IS high THEN Chase IS calm;
	RULE 5 : IF BLINKYedibleTime IS false AND pacManDistancePowerPill IS far AND pacManDistancePowerPillConfidence IS medium AND distanceToPacManConfidence IS medium THEN Chase IS emergency;
	RULE 6 : IF BLINKYedibleTime IS false AND pacManDistancePowerPill IS far AND pacManDistancePowerPillConfidence IS medium AND distanceToPacManConfidence IS medium THEN Runaway IS calm;
	RULE 7 : IF BLINKYedibleTime IS false AND BLINKYdistanceToPacMan IS far THEN Chase IS nervious;
	RULE 8 : IF BLINKYedibleTime IS false AND BLINKYdistanceToPacMan IS far THEN Runaway IS calm;
	RULE 9 : IF BLINKYedibleTime IS false AND BLINKYdistanceToPacMan IS near AND distanceToPacManConfidence IS high THEN Chase IS emergency;
	RULE 10 : IF BLINKYedibleTime IS false AND numPills IS few THEN Chase IS emergency;
	RULE 11 : IF BLINKYedibleTime IS false AND score IS few THEN Chase IS nervious;
	RULE 12 : IF BLINKYedibleTime IS false AND pacManDistancePowerPill IS near AND pacManDistancePowerPillConfidence IS high THEN Runaway IS nervious;
	RULE 13 : IF BLINKYedibleTime IS false AND currentTime IS few THEN Chase IS nervious;
	RULE 14 : IF BLINKYedibleTime IS false AND currentTime IS few AND pacManDistancePowerPill IS near AND pacManDistancePowerPillConfidence IS high THEN Runaway IS nervious;
	RULE 15 : IF currentTime IS few AND BLINKYedibleTime IS true THEN Chase IS calm;
	RULE 16 : IF currentTime IS few AND BLINKYedibleTime IS true AND BLINKYdistanceToPacMan IS far  THEN Chase IS nervious;
END_RULEBLOCK

RULEBLOCK INKYRules
	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;			// Use 'min' activation method
	ACCU : MAX;			// Use 'MAX' accumulation method (Other options PROBOR and SUM)

	RULE 1 : IF INKYedibleTime IS true AND INKYdistanceToPacMan IS near AND distanceToPacManConfidence IS high THEN Runaway IS emergency;
	RULE 2 : IF INKYedibleTime IS true AND INKYdistanceToPacMan IS near AND distanceToPacManConfidence IS high THEN Chase IS calm;
	RULE 3 : IF INKYedibleTime IS false AND pacManDistancePowerPill IS near AND pacManDistancePowerPillConfidence IS high THEN Runaway IS nervious;
	RULE 4 : IF INKYedibleTime IS false AND pacManDistancePowerPill IS near AND pacManDistancePowerPillConfidence IS high THEN Chase IS calm;
	RULE 5 : IF INKYedibleTime IS false AND pacManDistancePowerPill IS far AND pacManDistancePowerPillConfidence IS medium AND distanceToPacManConfidence IS medium THEN Chase IS emergency;
	RULE 6 : IF INKYedibleTime IS false AND pacManDistancePowerPill IS far AND pacManDistancePowerPillConfidence IS medium AND distanceToPacManConfidence IS medium THEN Runaway IS calm;
	RULE 7 : IF INKYedibleTime IS false AND INKYdistanceToPacMan IS far THEN Chase IS nervious;
	RULE 8 : IF INKYedibleTime IS false AND INKYdistanceToPacMan IS far THEN Runaway IS calm;
	RULE 9 : IF INKYedibleTime IS false AND INKYdistanceToPacMan IS near AND distanceToPacManConfidence IS high THEN Chase IS emergency;
	RULE 10 : IF INKYedibleTime IS false AND numPills IS few THEN Chase IS emergency;
	RULE 11 : IF INKYedibleTime IS false AND score IS few THEN Chase IS nervious;
	RULE 12 : IF INKYedibleTime IS false AND pacManDistancePowerPill IS near AND pacManDistancePowerPillConfidence IS high THEN Runaway IS nervious;
	RULE 13 : IF INKYedibleTime IS false AND currentTime IS few THEN Chase IS nervious;
	RULE 14 : IF INKYedibleTime IS false AND currentTime IS few AND pacManDistancePowerPill IS near AND pacManDistancePowerPillConfidence IS high THEN Runaway IS nervious;
	RULE 15 : IF currentTime IS few AND INKYedibleTime IS true THEN Chase IS calm;
	RULE 16 : IF currentTime IS few AND INKYedibleTime IS true AND INKYdistanceToPacMan IS far  THEN Chase IS nervious;
END_RULEBLOCK

RULEBLOCK PINKYRules
	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;			// Use 'min' activation method
	ACCU : MAX;			// Use 'MAX' accumulation method (Other options PROBOR and SUM)

	RULE 1 : IF PINKYedibleTime IS true AND PINKYdistanceToPacMan IS near AND distanceToPacManConfidence IS high THEN Runaway IS emergency;
	RULE 2 : IF PINKYedibleTime IS true AND PINKYdistanceToPacMan IS near AND distanceToPacManConfidence IS high THEN Chase IS calm;
	RULE 3 : IF PINKYedibleTime IS false AND pacManDistancePowerPill IS near AND pacManDistancePowerPillConfidence IS high THEN Runaway IS nervious;
	RULE 4 : IF PINKYedibleTime IS false AND pacManDistancePowerPill IS near AND pacManDistancePowerPillConfidence IS high THEN Chase IS calm;
	RULE 5 : IF PINKYedibleTime IS false AND pacManDistancePowerPill IS far AND pacManDistancePowerPillConfidence IS medium AND distanceToPacManConfidence IS medium THEN Chase IS emergency;
	RULE 6 : IF PINKYedibleTime IS false AND pacManDistancePowerPill IS far AND pacManDistancePowerPillConfidence IS medium AND distanceToPacManConfidence IS medium THEN Runaway IS calm;
	RULE 7 : IF PINKYedibleTime IS false AND PINKYdistanceToPacMan IS far THEN Chase IS nervious;
	RULE 8 : IF PINKYedibleTime IS false AND PINKYdistanceToPacMan IS far THEN Runaway IS calm;
	RULE 9 : IF PINKYedibleTime IS false AND PINKYdistanceToPacMan IS near AND distanceToPacManConfidence IS high THEN Chase IS emergency;
	RULE 10 : IF PINKYedibleTime IS false AND numPills IS few THEN Chase IS emergency;
	RULE 11 : IF PINKYedibleTime IS false AND score IS few THEN Chase IS nervious;
	RULE 12 : IF PINKYedibleTime IS false AND pacManDistancePowerPill IS near AND pacManDistancePowerPillConfidence IS high THEN Runaway IS nervious;
	RULE 13 : IF PINKYedibleTime IS false AND currentTime IS few THEN Chase IS nervious;
	RULE 14 : IF PINKYedibleTime IS false AND currentTime IS few AND pacManDistancePowerPill IS near AND pacManDistancePowerPillConfidence IS high THEN Runaway IS nervious;
	RULE 15 : IF currentTime IS few AND PINKYedibleTime IS true THEN Chase IS calm;
	RULE 16 : IF currentTime IS few AND PINKYedibleTime IS true AND PINKYdistanceToPacMan IS far  THEN Chase IS nervious;
END_RULEBLOCK

RULEBLOCK SUERules
	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;			// Use 'min' activation method
	ACCU : MAX;			// Use 'MAX' accumulation method (Other options PROBOR and SUM)

	RULE 1 : IF SUEedibleTime IS true AND SUEdistanceToPacMan IS near AND distanceToPacManConfidence IS high THEN Runaway IS emergency;
	RULE 2 : IF SUEedibleTime IS true AND SUEdistanceToPacMan IS near AND distanceToPacManConfidence IS high THEN Chase IS calm;
	RULE 3 : IF SUEedibleTime IS false AND pacManDistancePowerPill IS near AND pacManDistancePowerPillConfidence IS high THEN Runaway IS nervious;
	RULE 4 : IF SUEedibleTime IS false AND pacManDistancePowerPill IS near AND pacManDistancePowerPillConfidence IS high THEN Chase IS calm;
	RULE 5 : IF SUEedibleTime IS false AND pacManDistancePowerPill IS far AND pacManDistancePowerPillConfidence IS medium AND distanceToPacManConfidence IS medium THEN Chase IS emergency;
	RULE 6 : IF SUEedibleTime IS false AND pacManDistancePowerPill IS far AND pacManDistancePowerPillConfidence IS medium AND distanceToPacManConfidence IS medium THEN Runaway IS calm;
	RULE 7 : IF SUEedibleTime IS false AND SUEdistanceToPacMan IS far THEN Chase IS nervious;
	RULE 8 : IF SUEedibleTime IS false AND SUEdistanceToPacMan IS far THEN Runaway IS calm;
	RULE 9 : IF SUEedibleTime IS false AND SUEdistanceToPacMan IS near AND distanceToPacManConfidence IS high THEN Chase IS emergency;
	RULE 10 : IF SUEedibleTime IS false AND numPills IS few THEN Chase IS emergency;
	RULE 11 : IF SUEedibleTime IS false AND score IS few THEN Chase IS nervious;
	RULE 12 : IF SUEedibleTime IS false AND pacManDistancePowerPill IS near AND pacManDistancePowerPillConfidence IS high THEN Runaway IS nervious;
	RULE 13 : IF SUEedibleTime IS false AND currentTime IS few THEN Chase IS nervious;
	RULE 14 : IF SUEedibleTime IS false AND currentTime IS few AND pacManDistancePowerPill IS near AND pacManDistancePowerPillConfidence IS high THEN Runaway IS nervious;
	RULE 15 : IF currentTime IS few AND SUEedibleTime IS true THEN Chase IS calm;
	RULE 16 : IF currentTime IS few AND SUEedibleTime IS true AND SUEdistanceToPacMan IS far  THEN Chase IS nervious;
END_RULEBLOCK
// ------

END_FUNCTION_BLOCK

