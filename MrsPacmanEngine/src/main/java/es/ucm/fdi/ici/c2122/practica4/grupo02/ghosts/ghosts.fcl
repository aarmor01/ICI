// Block definition (there may be more than one block per file)
FUNCTION_BLOCK FuzzyGhosts

// Define input variables
VAR_INPUT				
	BLINKYedibleTime : REAL;
	PINKYedibleTime : REAL;
	INKYedibleTime : REAL;
	SUEedibleTime : REAL;
	
	BLINKYlairTime : REAL;
	PINKYlairTime : REAL;
	INKYlairTime : REAL;
	SUElairTime : REAL;
	
	BLINKYdistanceToPacMan : REAL;
	PINKYdistanceToPacMan : REAL;
	INKYdistanceToPacMan : REAL;
	SUEdistanceToPacMan : REAL;
	
	distanceToPacManConfidence : REAL;
	
	PacManDistancePowerPill : REAL;
	PacManDistancePowerPillConfidence : REAL;
	numPills : REAL;
	score : REAL;
	currentTime : REAL;
END_VAR

// Define output variables
VAR_OUTPUT				
	Runaway : REAL;
	Chase: REAL;
END_VAR

// --- INPUT VALUES GRAPHS ---
FUZZIFY BLINKYedibleTime	// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM low := (0, 1) (0.5, 0); 
	TERM medium := ;
	TERM high := (0.5, 0) (1, 1);
END_FUZZIFY
FUZZIFY PINKYedibleTime		// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM low := (0, 1) (0.5, 0); 
	TERM medium := ;
	TERM high := (0.5, 0) (1, 1);
END_FUZZIFY
FUZZIFY INKYedibleTime		// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM low := (0, 1) (0.5, 0); 
	TERM medium := ;
	TERM high := (0.5, 0) (1, 1);
END_FUZZIFY
FUZZIFY SUEedibleTime		// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM low := (0, 1) (0.5, 0); 
	TERM medium := ;
	TERM high := (0.5, 0) (1, 1);
END_FUZZIFY

FUZZIFY BLINKYlairTime	// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
    TERM none := (0, 0)
	TERM low := (0, 1) (0.5, 0); 
	TERM medium := ;
	TERM high := (0.5, 0) (1, 1);
END_FUZZIFY
FUZZIFY PINKYlairTime		// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM low := (0, 1) (0.5, 0); 
	TERM medium := ;
	TERM high := (0.5, 0) (1, 1);
END_FUZZIFY
FUZZIFY INKYlairTime		// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM low := (0, 1) (0.5, 0); 
	TERM medium := ;
	TERM high := (0.5, 0) (1, 1);
END_FUZZIFY
FUZZIFY SUElairTime		// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM low := (0, 1) (0.5, 0); 
	TERM medium := ;
	TERM high := (0.5, 0) (1, 1);
END_FUZZIFY


FUZZIFY PacManDistancePowerPill			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM near := (0, 1) (60, 0) ; 
	TERM medium := gauss 75 25;
	TERM far := (90, 0) (150, 1) (200, 1);
END_FUZZIFY
FUZZIFY PacManDistancePowerPillConfidence			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM low := (0,1)(25,1)(50,0) ; 
	TERM medium := gauss 50 25;
	TERM high := (50,0)(75,1)(100,1);
END_FUZZIFY
FUZZIFY BLINKYdistanceToPacMan			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM near := (0, 1) (60, 0) ; 
	TERM medium := gauss 75 25;
	TERM far := (90, 0) (150, 1) (200, 1);
END_FUZZIFY
FUZZIFY PINKYdistanceToPacMan			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM near := (0, 1) (60, 0); 
	TERM medium := gauss 75 25;
	TERM far := (90, 0) (150, 1) (200, 1);
END_FUZZIFY
FUZZIFY INKYdistanceToPacMan			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM near := (0, 1) (60, 0) ; 
	TERM medium := gauss 75 25;
	TERM far := (90, 0) (150, 1) (200, 1);
END_FUZZIFY
FUZZIFY SUEdistanceToPacMan			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM near := (0, 1) (60, 0) ; 
	TERM medium := gauss 75 25;
	TERM far := (90, 0) (150, 1) (200, 1);
END_FUZZIFY
FUZZIFY distanceToPacManConfidence			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM low := (0,1)(25,1)(50,0) ; 
	TERM medium := gauss 50 25;
	TERM high := (50,0)(75,1)(100,1);
END_FUZZIFY
FUZZIFY numPills			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM few := (0, 1) (25, 0) ; 
	TERM standard := gauss 50 25;
	TERM aLot := (70, 0) (100, 1) (200, 1);
END_FUZZIFY
FUZZIFY score			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM few := (0, 1) (1000, 0) ; 
	TERM standard := gauss 1750 1000;
	TERM aLot := (2700, 0) (3200, 1) (10000, 1);
END_FUZZIFY
FUZZIFY currentTime			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM beginning := (0, 1) (500, 0) ; 
	TERM mid := gauss 1000 750;
	TERM end := (1500, 0) (2000, 1) (10000, 1);
END_FUZZIFY
// ------

// --- OUTPUT VALUES GRAPHS ---
DEFUZZIFY Runaway			// Defzzzify output variable 'tip' : {'cheap', 'average', 'generous' }
	TERM calm := (0,1) (5,1) (15,0);
	TERM nervious := gauss 15 5;
	TERM emergency := (15,0) (25,1) (30,1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

DEFUZZIFY Chase			// Defzzzify output variable 'tip' : {'cheap', 'average', 'generous' }
	TERM calm := (0,1) (5,1) (15,0);
	TERM nervious := gauss 15 5;
	TERM emergency := (15,0) (25,1) (30,1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY
// ------

// --- RULES ---
RULEBLOCK BLINKYRules
	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;			// Use 'min' activation method
	ACCU : MAX;			// Use 'MAX' accumulation method (Other options PROBOR and SUM)

	RULE 1 : IF BLINKYedible IS true AND BLINKYdistanceToPacMan IS near AND distanceToPacManConfidence IS high THEN Runaway IS emergency;
	RULE 2 : IF BLINKYedible IS true AND BLINKYdistanceToPacMan IS near AND distanceToPacManConfidence IS high THEN Chase IS calm;
	RULE 3 : IF BLINKYedible IS false AND PacManDistancePowerPill IS near AND PacManDistancePowerPillConfidence IS high THEN Runaway IS nervious;
	RULE 4 : IF BLINKYedible IS false AND PacManDistancePowerPill IS near AND PacManDistancePowerPillConfidence IS high THEN Chase IS calm;
	RULE 5 : IF BLINKYedible IS false AND PacManDistancePowerPill IS far AND PacManDistancePowerPillConfidence IS medium AND distanceToPacManConfidence IS medium THEN Chase IS emergency;
	RULE 6 : IF BLINKYedible IS false AND PacManDistancePowerPill IS far AND PacManDistancePowerPillConfidence IS medium AND distanceToPacManConfidence IS medium THEN Runaway IS calm;
	RULE 7 : IF BLINKYedible IS false AND BLINKYdistanceToPacMan IS far THEN Chase IS nervious;
	RULE 8 : IF BLINKYedible IS false AND BLINKYdistanceToPacMan IS far THEN Runaway IS calm;
	RULE 9 : IF BLINKYedible IS false AND BLINKYdistanceToPacMan IS near AND distanceToPacManConfidence IS high THEN Chase IS emergency;
	RULE 10 : IF BLINKYedible IS false AND numPills IS few THEN Chase IS emergency;
	RULE 11 : IF BLINKYedible IS false AND score IS few THEN Chase IS nervious;
	RULE 12 : IF BLINKYedible IS false AND PacManDistancePowerPill IS near AND PacManDistancePowerPillConfidence IS high THEN Runaway IS nervious;
	RULE 13 : IF BLINKYedible IS false AND currentTime IS few THEN Chase IS nervious;
	RULE 14 : IF BLINKYedible IS false AND currentTime IS few AND PacManDistancePowerPill IS near AND PacManDistancePowerPillConfidence IS high THEN Runaway IS nervious;
	RULE 15 : IF currentTime IS few AND BLINKYedible IS true THEN Chase IS calm;
	RULE 16 : IF currentTime IS few AND BLINKYedible IS true AND BLINKYdistanceToPacMan IS far  THEN Chase IS nervious;
END_RULEBLOCK

RULEBLOCK INKYRules
	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;			// Use 'min' activation method
	ACCU : MAX;			// Use 'MAX' accumulation method (Other options PROBOR and SUM)

	RULE 1 : IF INKYedible IS true AND INKYdistanceToPacMan IS near AND distanceToPacManConfidence IS high THEN Runaway IS emergency;
	RULE 2 : IF INKYedible IS true AND INKYdistanceToPacMan IS near AND distanceToPacManConfidence IS high THEN Chase IS calm;
	RULE 3 : IF INKYedible IS false AND PacManDistancePowerPill IS near AND PacManDistancePowerPillConfidence IS high THEN Runaway IS nervious;
	RULE 4 : IF INKYedible IS false AND PacManDistancePowerPill IS near AND PacManDistancePowerPillConfidence IS high THEN Chase IS calm;
	RULE 5 : IF INKYedible IS false AND PacManDistancePowerPill IS far AND PacManDistancePowerPillConfidence IS medium AND distanceToPacManConfidence IS medium THEN Chase IS emergency;
	RULE 6 : IF INKYedible IS false AND PacManDistancePowerPill IS far AND PacManDistancePowerPillConfidence IS medium AND distanceToPacManConfidence IS medium THEN Runaway IS calm;
	RULE 7 : IF INKYedible IS false AND INKYdistanceToPacMan IS far THEN Chase IS nervious;
	RULE 8 : IF INKYedible IS false AND INKYdistanceToPacMan IS far THEN Runaway IS calm;
	RULE 9 : IF INKYedible IS false AND INKYdistanceToPacMan IS near AND distanceToPacManConfidence IS high THEN Chase IS emergency;
	RULE 10 : IF INKYedible IS false AND numPills IS few THEN Chase IS emergency;
	RULE 11 : IF INKYedible IS false AND score IS few THEN Chase IS nervious;
	RULE 12 : IF INKYedible IS false AND PacManDistancePowerPill IS near AND PacManDistancePowerPillConfidence IS high THEN Runaway IS nervious;
	RULE 13 : IF INKYedible IS false AND currentTime IS few THEN Chase IS nervious;
	RULE 14 : IF INKYedible IS false AND currentTime IS few AND PacManDistancePowerPill IS near AND PacManDistancePowerPillConfidence IS high THEN Runaway IS nervious;
	RULE 15 : IF currentTime IS few AND INKYedible IS true THEN Chase IS calm;
	RULE 16 : IF currentTime IS few AND INKYedible IS true AND INKYdistanceToPacMan IS far  THEN Chase IS nervious;
END_RULEBLOCK

RULEBLOCK PINKYRules
	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;			// Use 'min' activation method
	ACCU : MAX;			// Use 'MAX' accumulation method (Other options PROBOR and SUM)

	RULE 1 : IF PINKYedible IS true AND PINKYdistanceToPacMan IS near AND distanceToPacManConfidence IS high THEN Runaway IS emergency;
	RULE 2 : IF PINKYedible IS true AND PINKYdistanceToPacMan IS near AND distanceToPacManConfidence IS high THEN Chase IS calm;
	RULE 3 : IF PINKYedible IS false AND PacManDistancePowerPill IS near AND PacManDistancePowerPillConfidence IS high THEN Runaway IS nervious;
	RULE 4 : IF PINKYedible IS false AND PacManDistancePowerPill IS near AND PacManDistancePowerPillConfidence IS high THEN Chase IS calm;
	RULE 5 : IF PINKYedible IS false AND PacManDistancePowerPill IS far AND PacManDistancePowerPillConfidence IS medium AND distanceToPacManConfidence IS medium THEN Chase IS emergency;
	RULE 6 : IF PINKYedible IS false AND PacManDistancePowerPill IS far AND PacManDistancePowerPillConfidence IS medium AND distanceToPacManConfidence IS medium THEN Runaway IS calm;
	RULE 7 : IF PINKYedible IS false AND PINKYdistanceToPacMan IS far THEN Chase IS nervious;
	RULE 8 : IF PINKYedible IS false AND PINKYdistanceToPacMan IS far THEN Runaway IS calm;
	RULE 9 : IF PINKYedible IS false AND PINKYdistanceToPacMan IS near AND distanceToPacManConfidence IS high THEN Chase IS emergency;
	RULE 10 : IF PINKYedible IS false AND numPills IS few THEN Chase IS emergency;
	RULE 11 : IF PINKYedible IS false AND score IS few THEN Chase IS nervious;
	RULE 12 : IF PINKYedible IS false AND PacManDistancePowerPill IS near AND PacManDistancePowerPillConfidence IS high THEN Runaway IS nervious;
	RULE 13 : IF PINKYedible IS false AND currentTime IS few THEN Chase IS nervious;
	RULE 14 : IF PINKYedible IS false AND currentTime IS few AND PacManDistancePowerPill IS near AND PacManDistancePowerPillConfidence IS high THEN Runaway IS nervious;
	RULE 15 : IF currentTime IS few AND PINKYedible IS true THEN Chase IS calm;
	RULE 16 : IF currentTime IS few AND PINKYedible IS true AND PINKYdistanceToPacMan IS far  THEN Chase IS nervious;
END_RULEBLOCK

RULEBLOCK SUERules
	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;			// Use 'min' activation method
	ACCU : MAX;			// Use 'MAX' accumulation method (Other options PROBOR and SUM)

	RULE 1 : IF SUEedible IS true AND SUEdistanceToPacMan IS near AND distanceToPacManConfidence IS high THEN Runaway IS emergency;
	RULE 2 : IF SUEedible IS true AND SUEdistanceToPacMan IS near AND distanceToPacManConfidence IS high THEN Chase IS calm;
	RULE 3 : IF SUEedible IS false AND PacManDistancePowerPill IS near AND PacManDistancePowerPillConfidence IS high THEN Runaway IS nervious;
	RULE 4 : IF SUEedible IS false AND PacManDistancePowerPill IS near AND PacManDistancePowerPillConfidence IS high THEN Chase IS calm;
	RULE 5 : IF SUEedible IS false AND PacManDistancePowerPill IS far AND PacManDistancePowerPillConfidence IS medium AND distanceToPacManConfidence IS medium THEN Chase IS emergency;
	RULE 6 : IF SUEedible IS false AND PacManDistancePowerPill IS far AND PacManDistancePowerPillConfidence IS medium AND distanceToPacManConfidence IS medium THEN Runaway IS calm;
	RULE 7 : IF SUEedible IS false AND SUEdistanceToPacMan IS far THEN Chase IS nervious;
	RULE 8 : IF SUEedible IS false AND SUEdistanceToPacMan IS far THEN Runaway IS calm;
	RULE 9 : IF SUEedible IS false AND SUEdistanceToPacMan IS near AND distanceToPacManConfidence IS high THEN Chase IS emergency;
	RULE 10 : IF SUEedible IS false AND numPills IS few THEN Chase IS emergency;
	RULE 11 : IF SUEedible IS false AND score IS few THEN Chase IS nervious;
	RULE 12 : IF SUEedible IS false AND PacManDistancePowerPill IS near AND PacManDistancePowerPillConfidence IS high THEN Runaway IS nervious;
	RULE 13 : IF SUEedible IS false AND currentTime IS few THEN Chase IS nervious;
	RULE 14 : IF SUEedible IS false AND currentTime IS few AND PacManDistancePowerPill IS near AND PacManDistancePowerPillConfidence IS high THEN Runaway IS nervious;
	RULE 15 : IF currentTime IS few AND SUEedible IS true THEN Chase IS calm;
	RULE 16 : IF currentTime IS few AND SUEedible IS true AND SUEdistanceToPacMan IS far  THEN Chase IS nervious;
END_RULEBLOCK
 ------

END_FUNCTION_BLOCK

