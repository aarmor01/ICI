// Block definition (there may be more than one block per file)
FUNCTION_BLOCK FuzzyBlinky

// Define input variables
VAR_INPUT				
	BLINKYedible : REAL;
	PINKYedible : REAL;
	INKYedible : REAL;
	SUEedible : REAL;
	PacManDistancePowerPill : REAL;
	PacManDistancePowerPillConfidence : REAL;
	BLINKYdistance : REAL;
	PINKYdistance : REAL;
	INKYdistance : REAL;
	SUEdistance : REAL;
	distanceConfidence : REAL;
END_VAR

// Define output variables
VAR_OUTPUT				
	Runaway : REAL;
	Chase: REAL;
END_VAR

// --- INPUT VALUES GRAPHS ---
FUZZIFY BLINKYedible			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM false := (0, 1) (0.5, 0); 
	TERM true := (0.5, 0) (1, 1);
END_FUZZIFY
FUZZIFY PINKYedible			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM false := (0, 1) (0.5, 0); 
	TERM true := (0.5, 0) (1, 1);
END_FUZZIFY
FUZZIFY INKYedible			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM false := (0, 1) (0.5, 0); 
	TERM true := (0.5, 0) (1, 1);
END_FUZZIFY
FUZZIFY SUEedible			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM false := (0, 1) (0.5, 0); 
	TERM true := (0.5, 0) (1, 1);
END_FUZZIFY
FUZZIFY PacManDistancePowerPill			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM near := (0, 1) (60, 0) ; 
	TERM medium := gauss 75 25;
	TERM far := (90, 0) (150, 1) (200, 1);
END_FUZZIFY
FUZZIFY PacManDistancePowerPillConfidence			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM low := (0,1)(25,1)(50,0) ; 
	TERM medium := gauss 50 25;
	TERM high := (50,0)(75,1)(100,1);
END_FUZZIFY
FUZZIFY BLINKYdistance			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM near := (0, 1) (60, 0) ; 
	TERM medium := gauss 75 25;
	TERM far := (90, 0) (150, 1) (200, 1);
END_FUZZIFY
FUZZIFY PINKYdistance			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM near := (0, 1) (60, 0); 
	TERM medium := gauss 75 25;
	TERM far := (90, 0) (150, 1) (200, 1);
END_FUZZIFY
FUZZIFY INKYdistance			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM near := (0, 1) (60, 0) ; 
	TERM medium := gauss 75 25;
	TERM far := (90, 0) (150, 1) (200, 1);
END_FUZZIFY
FUZZIFY SUEdistance			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM near := (0, 1) (60, 0) ; 
	TERM medium := gauss 75 25;
	TERM far := (90, 0) (150, 1) (200, 1);
END_FUZZIFY
FUZZIFY distanceConfidence			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM low := (0,1)(25,1)(50,0) ; 
	TERM medium := gauss 50 25;
	TERM high := (50,0)(75,1)(100,1);
END_FUZZIFY
// ------

// --- OUTPUT VALUES GRAPHS ---
DEFUZZIFY Runaway			// Defzzzify output variable 'tip' : {'cheap', 'average', 'generous' }
	TERM calm := (0,1) (5,1) (15,0);
	TERM nervious := gauss 15 5;
	TERM emergency := (15,0) (25,1) (30,1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

DEFUZZIFY Chase			// Defzzzify output variable 'tip' : {'cheap', 'average', 'generous' }
	TERM calm := (0,1) (5,1) (15,0);
	TERM nervious := gauss 15 5;
	TERM emergency := (15,0) (25,1) (30,1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY
// ------

// --- RULES ---
RULEBLOCK BLINKYRules
	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;			// Use 'min' activation method
	ACCU : MAX;			// Use 'MAX' accumulation method (Other options PROBOR and SUM)

	RULE 1 : IF BLINKYedible IS true AND BLINKYdistance IS near AND distanceConfidence IS high THEN Runaway IS emergency;
	RULE 2 : IF BLINKYedible IS false AND PacManDistancePowerPill IS near AND PacManDistancePowerPillConfidence IS high THEN Runaway IS nervious;
	RULE 2 : IF distanceConfidence IS medium THEN Chase IS nervious;
	RULE 3 : IF BLINKYdistance IS far THEN Chase IS nervious;
	RULE 4 : IF BLINKYdistance IS far THEN Runaway IS calm;
	RULE 5 : IF BLINKYdistance IS near AND distanceConfidence IS high THEN Chase IS emergency;
END_RULEBLOCK

//RULEBLOCK INKYRules
//	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
//	ACT : MIN;			// Use 'min' activation method
//	ACCU : MAX;			// Use 'MAX' accumulation method (Other options PROBOR and SUM)
//
//	RULE 1 : IF BLINKYdistance IS near AND BLINKYconfidence IS high THEN Runaway IS emergency;
//	RULE 2 : IF PINKYdistance IS near AND PINKYconfidence IS high THEN Runaway IS emergency;
//	RULE 3 : IF INKYdistance IS near AND INKYconfidence IS high THEN Runaway IS emergency;
//	RULE 4 : IF SUEdistance IS near AND SUEconfidence IS high THEN Runaway IS emergency;
//	RULE 5 : IF BLINKYconfidence IS medium THEN GoToPill IS nervious;
//	RULE 6 : IF PINKYconfidence IS medium THEN GoToPill IS nervious;
//	RULE 7 : IF INKYconfidence IS medium THEN GoToPill IS nervious;
//	RULE 8 : IF SUEconfidence IS medium THEN GoToPill IS nervious;
//	//Esto es terrible
//	RULE 9 : IF BLINKYdistance IS far THEN Runaway IS calm;
//	RULE 9 : IF BLINKYdistance IS far THEN GoToPill IS emergency;
//	RULE 10 : IF PINKYdistance IS far THEN Runaway IS calm;
//	RULE 11 : IF PINKYdistance IS far THEN GoToPill IS emergency;
//	RULE 12 : IF INKYdistance IS far THEN Runaway IS calm;
//	RULE 13 : IF INKYdistance IS far THEN GoToPill IS emergency;
//	RULE 14 : IF SUEdistance IS far THEN Runaway IS calm;
//	RULE 15 : IF SUEdistance IS far THEN GoToPill IS emergency;
//END_RULEBLOCK
//
//RULEBLOCK PINKYRules
//	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
//	ACT : MIN;			// Use 'min' activation method
//	ACCU : MAX;			// Use 'MAX' accumulation method (Other options PROBOR and SUM)
//
//	RULE 1 : IF BLINKYdistance IS near AND BLINKYconfidence IS high THEN Runaway IS emergency;
//	RULE 2 : IF PINKYdistance IS near AND PINKYconfidence IS high THEN Runaway IS emergency;
//	RULE 3 : IF INKYdistance IS near AND INKYconfidence IS high THEN Runaway IS emergency;
//	RULE 4 : IF SUEdistance IS near AND SUEconfidence IS high THEN Runaway IS emergency;
//	RULE 5 : IF BLINKYconfidence IS medium THEN GoToPill IS nervious;
//	RULE 6 : IF PINKYconfidence IS medium THEN GoToPill IS nervious;
//	RULE 7 : IF INKYconfidence IS medium THEN GoToPill IS nervious;
//	RULE 8 : IF SUEconfidence IS medium THEN GoToPill IS nervious;
//	//Esto es terrible
//	RULE 9 : IF BLINKYdistance IS far THEN Runaway IS calm;
//	RULE 9 : IF BLINKYdistance IS far THEN GoToPill IS emergency;
//	RULE 10 : IF PINKYdistance IS far THEN Runaway IS calm;
//	RULE 11 : IF PINKYdistance IS far THEN GoToPill IS emergency;
//	RULE 12 : IF INKYdistance IS far THEN Runaway IS calm;
//	RULE 13 : IF INKYdistance IS far THEN GoToPill IS emergency;
//	RULE 14 : IF SUEdistance IS far THEN Runaway IS calm;
//	RULE 15 : IF SUEdistance IS far THEN GoToPill IS emergency;
//END_RULEBLOCK
//
//RULEBLOCK SUERules
//	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
//	ACT : MIN;			// Use 'min' activation method
//	ACCU : MAX;			// Use 'MAX' accumulation method (Other options PROBOR and SUM)
//
//	RULE 1 : IF BLINKYdistance IS near AND BLINKYconfidence IS high THEN Runaway IS emergency;
//	RULE 2 : IF PINKYdistance IS near AND PINKYconfidence IS high THEN Runaway IS emergency;
//	RULE 3 : IF INKYdistance IS near AND INKYconfidence IS high THEN Runaway IS emergency;
//	RULE 4 : IF SUEdistance IS near AND SUEconfidence IS high THEN Runaway IS emergency;
//	RULE 5 : IF BLINKYconfidence IS medium THEN GoToPill IS nervious;
//	RULE 6 : IF PINKYconfidence IS medium THEN GoToPill IS nervious;
//	RULE 7 : IF INKYconfidence IS medium THEN GoToPill IS nervious;
//	RULE 8 : IF SUEconfidence IS medium THEN GoToPill IS nervious;
//	//Esto es terrible
//	RULE 9 : IF BLINKYdistance IS far THEN Runaway IS calm;
//	RULE 9 : IF BLINKYdistance IS far THEN GoToPill IS emergency;
//	RULE 10 : IF PINKYdistance IS far THEN Runaway IS calm;
//	RULE 11 : IF PINKYdistance IS far THEN GoToPill IS emergency;
//	RULE 12 : IF INKYdistance IS far THEN Runaway IS calm;
//	RULE 13 : IF INKYdistance IS far THEN GoToPill IS emergency;
//	RULE 14 : IF SUEdistance IS far THEN Runaway IS calm;
//	RULE 15 : IF SUEdistance IS far THEN GoToPill IS emergency;
//END_RULEBLOCK
// ------

END_FUNCTION_BLOCK

